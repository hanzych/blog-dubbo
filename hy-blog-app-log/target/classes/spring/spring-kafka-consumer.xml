<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd">    <!-- 1.定义consumer的参数 -->    <!--<context:property-placeholder location="classpath*:kafka/kafka.properties" />-->    <bean id="consumerProperties" class="java.util.HashMap">        <constructor-arg>            <map>                <entry key="bootstrap.servers" value="${kafka.consumer.bootstrap.servers}" />                <entry key="group.id" value="${kafka.consumer.group.id}" />                <entry key="enable.auto.commit" value="${kafka.consumer.enable.auto.commit}" />                <entry key="session.timeout.ms" value="${kafka.consumer.session.timeout.ms}" />                <entry key="auto.commit.interval.ms" value="${kafka.consumer.auto.commit.interval.ms}" />                <entry key="retry.backoff.ms" value="100" />                <entry key="key.deserializer"                       value="${kafka.consumer.key.deserializer}" />                <entry key="value.deserializer"                       value="${kafka.consumer.value.deserializer}" />            </map>        </constructor-arg>    </bean>    <!-- 2.创建consumerFactory bean -->    <bean id="consumerFactory"          class="org.springframework.kafka.core.DefaultKafkaConsumerFactory" >        <constructor-arg>            <ref bean="consumerProperties" />        </constructor-arg>    </bean>    <!--&lt;!&ndash; 3.定义消费实现类 &ndash;&gt;-->    <!--<bean id="kafkaConsumerListener" class="com.yfancy.app.log.listener.KafkaConsumerListener" />-->    <bean id="webTimerKafkaLog" class="com.yfancy.app.log.listener.WebTimerKafkaLog" />    <bean id="webBossKafkaLog" class="com.yfancy.app.log.listener.WebBossKafkaLog" />    <!-- 消费者容器配置信息 -->    <bean id="containerProperties_web_timer" class="org.springframework.kafka.listener.config.ContainerProperties">        <constructor-arg value="web_timer_topic"/>        <property name="messageListener" ref="webTimerKafkaLog"/>    </bean>    <bean id="containerProperties_web_boss" class="org.springframework.kafka.listener.config.ContainerProperties">        <constructor-arg value="web_boss_topic"/>        <property name="messageListener" ref="webBossKafkaLog"/>    </bean>    <!-- 5.消费者并发消息监听容器，执行doStart()方法 -->    <!-- 创建messageListenerContainer bean，使用的时候，只需要注入这个bean -->    <bean id="messageListenerContainer_web_timer" class="org.springframework.kafka.listener.KafkaMessageListenerContainer"          init-method="doStart">        <constructor-arg ref="consumerFactory"/>        <constructor-arg ref="containerProperties_web_timer"/>    </bean>    <bean id="messageListenerContainer_web_boss" class="org.springframework.kafka.listener.KafkaMessageListenerContainer"          init-method="doStart">        <constructor-arg ref="consumerFactory"/>        <constructor-arg ref="containerProperties_web_boss"/>    </bean></beans>